#pragma kernel Fill

#pragma kernel ProjectInit
#pragma kernel ProjectIteration
#pragma kernel ProjectBake

#pragma kernel Advection

#pragma kernel SphereForce
#pragma kernel CapsuleForce
#pragma kernel BoxForce

#pragma kernel SphereObstacle
#pragma kernel CapsuleObstacle
#pragma kernel BoxObstacle


const static float MagicValue = -73;

// ##########################
// #         Common         #
// ##########################

RWTexture3D<float4> MainTexture;
RWTexture3D<float4> TempTexture;
RWTexture3D<float2> ProjTexture; // x - divergence, y - pressure
uint3 GridSize;     // blocks * blockSize

bool inSimulationArea(uint3 id) {
    return
        id.x > 0 && id.y > 0 && id.z > 0
        && id.x < GridSize.x - 1
        && id.y < GridSize.y - 1
        && id.z < GridSize.z - 1;
}

bool inTexture(int3 id) {
    return
        id.x >= 0 && id.y >= 0 && id.z >= 0
        && id.x < int(GridSize.x)
        && id.y < int(GridSize.y)
        && id.z < int(GridSize.z);
}

bool isMagic(float v) {
    return v == MagicValue;
}

// ##########################
// #          Fill          #
// ##########################

float4 FillValue;

[numthreads(16, 16, 2)]
void Fill(uint3 id : SV_DispatchThreadID)
{
    MainTexture[id] = FillValue;
}


// ##########################
// #       Projection       #
// ##########################


[numthreads(16, 16, 2)]
void ProjectInit(uint3 id : SV_DispatchThreadID)
{
    float4 value = TempTexture[id];
    float2 last = ProjTexture[id];

    float2 result = float2(MagicValue, 0);
    if (inSimulationArea(id)) {
        float4 vx_p = TempTexture[id + uint3(1, 0, 0)];
        float4 vy_p = TempTexture[id + uint3(0, 1, 0)];
        float4 vz_p = TempTexture[id + uint3(0, 0, 1)];

        float4 vx_n = TempTexture[id - uint3(1, 0, 0)];
        float4 vy_n = TempTexture[id - uint3(0, 1, 0)];
        float4 vz_n = TempTexture[id - uint3(0, 0, 1)];

        if (id.x == 1) vx_n.x = -value.x;
        if (id.y == 1) vy_n.y = -value.y;
        if (id.z == 1) vz_n.z = -value.z;
        if (id.x == GridSize.x - 2) vx_p.x = -value.x;
        if (id.y == GridSize.y - 2) vy_p.y = -value.y;
        if (id.z == GridSize.z - 2) vz_p.z = -value.z;
        float div = 0.5 * (
            + (vx_p.x - vx_n.x) * GridSize.x
            + (vy_p.y - vy_n.y) * GridSize.y
            + (vz_p.z - vz_n.z) * GridSize.z
        );
        result = float2(div, last.y);
    }

    ProjTexture[id] = result;
}

#define Z_ITERATIONS 4

[numthreads(16, 16, 1)]
void ProjectIteration(uint3 t_id : SV_DispatchThreadID)
{
    uint3 id = uint3(t_id.x, t_id.y, t_id.z * Z_ITERATIONS - 1);

    float2 value = ProjTexture[id];
    float2 vz_p = ProjTexture[id + uint3(0, 0, 1)];

    for (int i = 0; i < Z_ITERATIONS; ++i)
    {
        id.z += 1;
        float2 vz_n = value;
        float2 value = vz_p;

        float2 vx_p = ProjTexture[id + uint3(1, 0, 0)];
        float2 vy_p = ProjTexture[id + uint3(0, 1, 0)];
        vz_p = ProjTexture[id + uint3(0, 0, 1)];

        float2 vx_n = ProjTexture[id - uint3(1, 0, 0)];
        float2 vy_n = ProjTexture[id - uint3(0, 1, 0)];

        if (isMagic(value.x))
            continue;

        float sum_p = vx_p.y + vx_n.y + vy_p.y + vy_n.y + vz_p.y + vz_n.y;
        value.y = (sum_p - value.x) * (1.0 / 6.0);
        ProjTexture[id] = value;
    }
}


[numthreads(16, 16, 2)]
void ProjectBake(uint3 id : SV_DispatchThreadID)
{
    float4 value = TempTexture[id];
    float2 vx_p = ProjTexture[id + uint3(1, 0, 0)];
    float2 vy_p = ProjTexture[id + uint3(0, 1, 0)];
    float2 vz_p = ProjTexture[id + uint3(0, 0, 1)];

    float2 vx_n = ProjTexture[id - uint3(1, 0, 0)];
    float2 vy_n = ProjTexture[id - uint3(0, 1, 0)];
    float2 vz_n = ProjTexture[id - uint3(0, 0, 1)];

    float3 result = value.xyz;
    float3 grad_p = 0.5 * float3(
        vx_p.y - vx_n.y,
        vy_p.y - vy_n.y,
        vz_p.y - vz_n.y
    )/ GridSize;
    if (!isMagic(value.w))
        result -= grad_p;
    else
        result += 3 * grad_p; // TODO: think again
    MainTexture[id] = float4(result, 0);
}

// ##########################
// #       Advection        #
// ##########################

float AdvectionDeltaTime;

[numthreads(16, 16, 2)]
void Advection(uint3 id : SV_DispatchThreadID)
{
    if (!inSimulationArea(id))
        return;
    float4 value = MainTexture[id];
    float3 delta = value.xyz * GridSize * AdvectionDeltaTime;
    float3 p = id - delta;
    p.x = clamp(p.x, 0, GridSize.x - (1 + 1e-5f));
    p.y = clamp(p.y, 0, GridSize.y - (1 + 1e-5f));
    p.z = clamp(p.z, 0, GridSize.z - (1 + 1e-5f));

    uint3 int_p = floor(p);
    float3 dp = p - int_p;
    float3 dn = 1 - dp;
    TempTexture[id] = (
        + MainTexture[int_p + uint3(0, 0, 0)] * dn.x * dn.y * dn.z
        + MainTexture[int_p + uint3(0, 0, 1)] * dn.x * dn.y * dp.z
        + MainTexture[int_p + uint3(0, 1, 0)] * dn.x * dp.y * dn.z
        + MainTexture[int_p + uint3(0, 1, 1)] * dn.x * dp.y * dp.z
        + MainTexture[int_p + uint3(1, 0, 0)] * dp.x * dn.y * dn.z
        + MainTexture[int_p + uint3(1, 0, 1)] * dp.x * dn.y * dp.z
        + MainTexture[int_p + uint3(1, 1, 0)] * dp.x * dp.y * dn.z
        + MainTexture[int_p + uint3(1, 1, 1)] * dp.x * dp.y * dp.z
    );
}


// ##########################
// #        Colliders       #
// ##########################

float3 SphereCenter;
float SphereRadius;

bool collideSphere(uint3 id)
{
    float3 d = id - SphereCenter;
    float r2 = d.x * d.x + d.y * d.y + d.z * d.z;
    return r2 <= SphereRadius * SphereRadius;
}

float3 CapsulePoint;
float3 CapsuleDirection;
float CapsuleDividedHeight2;
float CapsuleRadius;

bool collideCapsule(uint3 id)
{
    float3 d = id - CapsulePoint;
    d -= CapsuleDirection * clamp(dot(d, CapsuleDirection) * CapsuleDividedHeight2, 0, 1);
    float r2 = d.x * d.x + d.y * d.y + d.z * d.z;
    return r2 <= CapsuleRadius * CapsuleRadius;
}

float3 BoxCenter;
float3 BoxHalfSize;
float4x4 BoxRotation;

bool collideBox(uint3 id)
{
    float3 d = id - BoxCenter;
    d = abs(mul((float3x3)BoxRotation, d));
    return d.x < BoxHalfSize.x && d.y < BoxHalfSize.y && d.z < BoxHalfSize.z;
}


// ##########################
// #          Force         #
// ##########################

float3 ForceValue;

void applyForce(uint3 id)
{
    float4 cell = MainTexture[id];
    TempTexture[id] = float4(cell.xyz + ForceValue, cell.w);
}

[numthreads(16, 16, 2)]
void SphereForce(uint3 id : SV_DispatchThreadID)
{
    if (!inSimulationArea(id)) return;
    if (!collideSphere(id)) return;
    applyForce(id);
}

[numthreads(16, 16, 2)]
void CapsuleForce(uint3 id : SV_DispatchThreadID)
{
    if (!inSimulationArea(id)) return;
    if (!collideCapsule(id)) return;
    applyForce(id);
}

[numthreads(16, 16, 2)]
void BoxForce(uint3 id : SV_DispatchThreadID)
{
    if (!inSimulationArea(id)) return;
    if (!collideBox(id)) return;
    applyForce(id);
}


// ##########################
// #        Obstacles       #
// ##########################

float3 ObstacleVelocity;
float3 ObstacleAngularVelocity;
float3 ObstacleRotationCenter;

void applyObstacle(uint3 id)
{
    float3 d = id - ObstacleRotationCenter;
    float3 vel = cross(ObstacleAngularVelocity, d);
    TempTexture[id] = float4(ObstacleVelocity + vel / GridSize, MagicValue);
}

[numthreads(16, 16, 2)]
void SphereObstacle(uint3 id : SV_DispatchThreadID)
{
    if (!inSimulationArea(id)) return;
    if (!collideSphere(id)) return;
    applyObstacle(id);
}

[numthreads(16, 16, 2)]
void CapsuleObstacle(uint3 id : SV_DispatchThreadID)
{
    if (!inSimulationArea(id)) return;
    if (!collideCapsule(id)) return;
    applyObstacle(id);
}

[numthreads(16, 16, 2)]
void BoxObstacle(uint3 id : SV_DispatchThreadID)
{
    if (!inSimulationArea(id)) return;
    if (!collideBox(id)) return;
    applyObstacle(id);
}
